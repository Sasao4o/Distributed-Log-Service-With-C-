// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logprog.proto
#ifndef GRPC_logprog_2eproto__INCLUDED
#define GRPC_logprog_2eproto__INCLUDED

#include "logprog.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace logprog {
namespace v1 {

// START: service
class Logging final {
 public:
  static constexpr char const* service_full_name() {
    return "logprog.v1.Logging";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::logprog::v1::ProduceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>> AsyncProduce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>>(AsyncProduceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>> PrepareAsyncProduce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>>(PrepareAsyncProduceRaw(context, request, cq));
    }
    virtual ::grpc::Status Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::logprog::v1::ConsumeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>> AsyncConsume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>>(AsyncConsumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>> PrepareAsyncConsume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>>(PrepareAsyncConsumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::logprog::v1::ConsumeResponse>> ConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::logprog::v1::ConsumeResponse>>(ConsumeStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>> AsyncConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>>(AsyncConsumeStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>> PrepareAsyncConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>>(PrepareAsyncConsumeStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> ProduceStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(ProduceStreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> AsyncProduceStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(AsyncProduceStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> PrepareAsyncProduceStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(PrepareAsyncProduceStreamRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::grpc::ClientReadReactor< ::logprog::v1::ConsumeResponse>* reactor) = 0;
      virtual void ProduceStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::logprog::v1::ProduceRequest,::logprog::v1::ProduceResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>* AsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ProduceResponse>* PrepareAsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>* AsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::logprog::v1::ConsumeResponse>* PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::logprog::v1::ConsumeResponse>* ConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>* AsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::logprog::v1::ConsumeResponse>* PrepareAsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* ProduceStreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* AsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* PrepareAsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::logprog::v1::ProduceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>> AsyncProduce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>>(AsyncProduceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>> PrepareAsyncProduce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>>(PrepareAsyncProduceRaw(context, request, cq));
    }
    ::grpc::Status Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::logprog::v1::ConsumeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>> AsyncConsume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>>(AsyncConsumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>> PrepareAsyncConsume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>>(PrepareAsyncConsumeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::logprog::v1::ConsumeResponse>> ConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::logprog::v1::ConsumeResponse>>(ConsumeStreamRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>> AsyncConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>>(AsyncConsumeStreamRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>> PrepareAsyncConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>>(PrepareAsyncConsumeStreamRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> ProduceStream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(ProduceStreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> AsyncProduceStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(AsyncProduceStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>> PrepareAsyncProduceStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>>(PrepareAsyncProduceStreamRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, std::function<void(::grpc::Status)>) override;
      void Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, std::function<void(::grpc::Status)>) override;
      void Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::grpc::ClientReadReactor< ::logprog::v1::ConsumeResponse>* reactor) override;
      void ProduceStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::logprog::v1::ProduceRequest,::logprog::v1::ProduceResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>* AsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>* PrepareAsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>* AsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>* PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::logprog::v1::ConsumeResponse>* ConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request) override;
    ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>* AsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>* PrepareAsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* ProduceStreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* AsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* PrepareAsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Produce_;
    const ::grpc::internal::RpcMethod rpcmethod_Consume_;
    const ::grpc::internal::RpcMethod rpcmethod_ConsumeStream_;
    const ::grpc::internal::RpcMethod rpcmethod_ProduceStream_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Produce(::grpc::ServerContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response);
    virtual ::grpc::Status Consume(::grpc::ServerContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response);
    virtual ::grpc::Status ConsumeStream(::grpc::ServerContext* context, const ::logprog::v1::ConsumeRequest* request, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* writer);
    virtual ::grpc::Status ProduceStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Produce() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProduce(::grpc::ServerContext* context, ::logprog::v1::ProduceRequest* request, ::grpc::ServerAsyncResponseWriter< ::logprog::v1::ProduceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Consume() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsume(::grpc::ServerContext* context, ::logprog::v1::ConsumeRequest* request, ::grpc::ServerAsyncResponseWriter< ::logprog::v1::ConsumeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeStream(::grpc::ServerContext* context, ::logprog::v1::ConsumeRequest* request, ::grpc::ServerAsyncWriter< ::logprog::v1::ConsumeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ProduceStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ProduceStream() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ProduceStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProduceStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProduceStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Produce<WithAsyncMethod_Consume<WithAsyncMethod_ConsumeStream<WithAsyncMethod_ProduceStream<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Produce() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response) { return this->Produce(context, request, response); }));}
    void SetMessageAllocatorFor_Produce(
        ::grpc::MessageAllocator< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Produce(
      ::grpc::CallbackServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Consume() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response) { return this->Consume(context, request, response); }));}
    void SetMessageAllocatorFor_Consume(
        ::grpc::MessageAllocator< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Consume(
      ::grpc::CallbackServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::logprog::v1::ConsumeRequest* request) { return this->ConsumeStream(context, request); }));
    }
    ~WithCallbackMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::logprog::v1::ConsumeResponse>* ConsumeStream(
      ::grpc::CallbackServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ProduceStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ProduceStream() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ProduceStream(context); }));
    }
    ~WithCallbackMethod_ProduceStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProduceStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* ProduceStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_Produce<WithCallbackMethod_Consume<WithCallbackMethod_ConsumeStream<WithCallbackMethod_ProduceStream<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Produce() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Consume() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ProduceStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ProduceStream() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ProduceStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProduceStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Produce() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProduce(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Consume() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsume(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestConsumeStream(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ProduceStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ProduceStream() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ProduceStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProduceStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProduceStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(3, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Produce() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Produce(context, request, response); }));
    }
    ~WithRawCallbackMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Produce(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Consume() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Consume(context, request, response); }));
    }
    ~WithRawCallbackMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Consume(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->ConsumeStream(context, request); }));
    }
    ~WithRawCallbackMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* ConsumeStream(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ProduceStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ProduceStream() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->ProduceStream(context); }));
    }
    ~WithRawCallbackMethod_ProduceStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ProduceStream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* ProduceStream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Produce : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Produce() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* streamer) {
                       return this->StreamedProduce(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Produce() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Produce(::grpc::ServerContext* /*context*/, const ::logprog::v1::ProduceRequest* /*request*/, ::logprog::v1::ProduceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProduce(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::logprog::v1::ProduceRequest,::logprog::v1::ProduceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Consume : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Consume() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>* streamer) {
                       return this->StreamedConsume(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Consume() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Consume(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::logprog::v1::ConsumeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedConsume(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::logprog::v1::ConsumeRequest,::logprog::v1::ConsumeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Produce<WithStreamedUnaryMethod_Consume<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_ConsumeStream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_ConsumeStream() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>* streamer) {
                       return this->StreamedConsumeStream(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_ConsumeStream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ConsumeStream(::grpc::ServerContext* /*context*/, const ::logprog::v1::ConsumeRequest* /*request*/, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedConsumeStream(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::logprog::v1::ConsumeRequest,::logprog::v1::ConsumeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_ConsumeStream<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_Produce<WithStreamedUnaryMethod_Consume<WithSplitStreamingMethod_ConsumeStream<Service > > > StreamedService;
};

}  // namespace v1
}  // namespace logprog


#endif  // GRPC_logprog_2eproto__INCLUDED
