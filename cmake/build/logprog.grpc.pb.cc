// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logprog.proto

#include "logprog.pb.h"
#include "logprog.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace logprog {
namespace v1 {

static const char* Logging_method_names[] = {
  "/logprog.v1.Logging/Produce",
  "/logprog.v1.Logging/Consume",
  "/logprog.v1.Logging/ConsumeStream",
  "/logprog.v1.Logging/ProduceStream",
};

std::unique_ptr< Logging::Stub> Logging::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Logging::Stub> stub(new Logging::Stub(channel, options));
  return stub;
}

Logging::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Produce_(Logging_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Consume_(Logging_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ConsumeStream_(Logging_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ProduceStream_(Logging_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status Logging::Stub::Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::logprog::v1::ProduceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Produce_, context, request, response);
}

void Logging::Stub::async::Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, std::move(f));
}

void Logging::Stub::async::Produce(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Produce_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>* Logging::Stub::PrepareAsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Produce_, context, request);
}

::grpc::ClientAsyncResponseReader< ::logprog::v1::ProduceResponse>* Logging::Stub::AsyncProduceRaw(::grpc::ClientContext* context, const ::logprog::v1::ProduceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncProduceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Logging::Stub::Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::logprog::v1::ConsumeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Consume_, context, request, response);
}

void Logging::Stub::async::Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, std::move(f));
}

void Logging::Stub::async::Consume(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Consume_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>* Logging::Stub::PrepareAsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::logprog::v1::ConsumeResponse, ::logprog::v1::ConsumeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Consume_, context, request);
}

::grpc::ClientAsyncResponseReader< ::logprog::v1::ConsumeResponse>* Logging::Stub::AsyncConsumeRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncConsumeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::logprog::v1::ConsumeResponse>* Logging::Stub::ConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::logprog::v1::ConsumeResponse>::Create(channel_.get(), rpcmethod_ConsumeStream_, context, request);
}

void Logging::Stub::async::ConsumeStream(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest* request, ::grpc::ClientReadReactor< ::logprog::v1::ConsumeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::logprog::v1::ConsumeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ConsumeStream_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>* Logging::Stub::AsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::logprog::v1::ConsumeResponse>::Create(channel_.get(), cq, rpcmethod_ConsumeStream_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::logprog::v1::ConsumeResponse>* Logging::Stub::PrepareAsyncConsumeStreamRaw(::grpc::ClientContext* context, const ::logprog::v1::ConsumeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::logprog::v1::ConsumeResponse>::Create(channel_.get(), cq, rpcmethod_ConsumeStream_, context, request, false, nullptr);
}

::grpc::ClientReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* Logging::Stub::ProduceStreamRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>::Create(channel_.get(), rpcmethod_ProduceStream_, context);
}

void Logging::Stub::async::ProduceStream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::logprog::v1::ProduceRequest,::logprog::v1::ProduceResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::logprog::v1::ProduceRequest,::logprog::v1::ProduceResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ProduceStream_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* Logging::Stub::AsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>::Create(channel_.get(), cq, rpcmethod_ProduceStream_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>* Logging::Stub::PrepareAsyncProduceStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>::Create(channel_.get(), cq, rpcmethod_ProduceStream_, context, false, nullptr);
}

Logging::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Logging_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Logging::Service, ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Logging::Service* service,
             ::grpc::ServerContext* ctx,
             const ::logprog::v1::ProduceRequest* req,
             ::logprog::v1::ProduceResponse* resp) {
               return service->Produce(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Logging_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Logging::Service, ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Logging::Service* service,
             ::grpc::ServerContext* ctx,
             const ::logprog::v1::ConsumeRequest* req,
             ::logprog::v1::ConsumeResponse* resp) {
               return service->Consume(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Logging_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Logging::Service, ::logprog::v1::ConsumeRequest, ::logprog::v1::ConsumeResponse>(
          [](Logging::Service* service,
             ::grpc::ServerContext* ctx,
             const ::logprog::v1::ConsumeRequest* req,
             ::grpc::ServerWriter<::logprog::v1::ConsumeResponse>* writer) {
               return service->ConsumeStream(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Logging_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< Logging::Service, ::logprog::v1::ProduceRequest, ::logprog::v1::ProduceResponse>(
          [](Logging::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::logprog::v1::ProduceResponse,
             ::logprog::v1::ProduceRequest>* stream) {
               return service->ProduceStream(ctx, stream);
             }, this)));
}

Logging::Service::~Service() {
}

::grpc::Status Logging::Service::Produce(::grpc::ServerContext* context, const ::logprog::v1::ProduceRequest* request, ::logprog::v1::ProduceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Logging::Service::Consume(::grpc::ServerContext* context, const ::logprog::v1::ConsumeRequest* request, ::logprog::v1::ConsumeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Logging::Service::ConsumeStream(::grpc::ServerContext* context, const ::logprog::v1::ConsumeRequest* request, ::grpc::ServerWriter< ::logprog::v1::ConsumeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Logging::Service::ProduceStream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::logprog::v1::ProduceResponse, ::logprog::v1::ProduceRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace logprog
}  // namespace v1

